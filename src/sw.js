import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Log when service worker is installed
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
});

// Log when service worker is activated
self.addEventListener('activate', (event) => {
  console.log('Service Worker activated!');
});

// Precache all assets generated by vite
precacheAndRoute(self.__WB_MANIFEST);

// Cache API responses
registerRoute(
  ({ url }) => url.pathname.startsWith('/api'),
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
    ],
  })
);

// Cache static assets
registerRoute(
  ({ request }) => request.destination === 'image' ||
                   request.destination === 'style' ||
                   request.destination === 'script',
  new CacheFirst({
    cacheName: 'static-resources',
  })
);

// Push notification handler
self.addEventListener('push', (event) => {
  console.log('Push event received!', event);
  
  let notificationData = {};
  
  try {
    if (event.data) {
      console.log('Push event has data:', event.data.text());
      try {
        // Try to parse as JSON
        notificationData = JSON.parse(event.data.text());
      } catch (e) {
        // If not JSON, use as plain text
        notificationData = {
          title: 'New Notification',
          body: event.data.text()
        };
      }
    } else {
      console.log('Push event has no data');
      notificationData = {
        title: 'New Notification',
        body: 'You received a new notification'
      };
    }
  } catch (error) {
    console.error('Error processing push data:', error);
    notificationData = {
      title: 'New Notification',
      body: 'Error processing notification data'
    };
  }
  
  const title = notificationData.title || 'New Notification';
  const options = {
    body: notificationData.body || 'You received a new notification',
    icon: './vite.svg',
    badge: './vite.svg',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1,
      ...notificationData
    }
  };

  console.log('Showing notification with:', { title, options });

  event.waitUntil(
    self.registration.showNotification(title, options)
    .then(() => console.log('Notification shown successfully'))
    .catch(err => console.error('Error showing notification:', err))
  );
});

// Notification click handler
self.addEventListener('notificationclick', (event) => {
  console.log('Notification clicked:', event);
  event.notification.close();
  event.waitUntil(
    clients.openWindow('/')
    .then(() => console.log('Window opened successfully'))
    .catch(err => console.error('Error opening window:', err))
  );
}); 